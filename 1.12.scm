; procedure that computes elements of Pascal's triangle by means of a recursive process
(define (getpascal x y)
  (cond ((or (< x 0) (< y 0) (> y x)) 0)
        ((= x 0) 1)
        ((> x 0) (+ (getpascal (- x 1) y) (getpascal (- x 1) (- y 1))))
  )
)
(define (pascal-iter n count y)
  (if (< n y)
      (begin 
        (display (getpascal n count))
        (display " ")
        (if (> n count)
          (pascal-iter n (+ count 1) y)
          (begin
            (display "\n")
            (pascal-iter (+ n 1) 0 y)
          )
         )
      )
      "done"
  )
)
(define (pascal n)
  (display "\n")
  (pascal-iter 0 0 n)
)
(pascal 16)

; bonus: finding pascals number with the use of combinatorics (and in the form of an iterative process)
; n!/(r!(n-r)!) where n is the rownumber and r is the element in the row (both starting with 0)
(define (fact-iter n result)
  (if (> n 1)
      (fact-iter (- n 1) (* n result))
      result
  )
)
(define (factorial n)
  (fact-iter n 1)
)
(define (getpascal x y)
  (/ (factorial x)
     (* (factorial (- x y)) 
        (factorial y))
  )
)
(pascal 64)
